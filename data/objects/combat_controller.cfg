{
	id: "combat_controller",
	is_human: true,
	hitpoints: 4,
	editor_info: { category: "player" },
	hidden_in_game: true,
	animation: [{
		id: "normal",
		image: "cube.png",
		rect: [0,0,15,15],
		collide: [0,0,15,15],
		frames: 1,
		duration: 1000,
	}],
	
	properties: {
		_v_up: [0.0,1.0,0.0],
		_v_target: [8.0,-2.0,8.0],
		_v_position: [22.0, 12.0, 22.0],
		_pos_index: 0,
		_key_lockout: false,

		_client: { type: "object" },

		_game: { type: "class game" },
		
		_enable_key_lockout: "[schedule(10, set(_key_lockout, false)), set(_key_lockout, true)]",
			
		_set_cam_rotation_l: "def(decimal ratio) -> commands
			set(level.camera.position, switch(_pos_index, 
				0, [22.0-28.0*ratio, 12, 22],
				1, [-6, 12, 22.0-28.0*ratio],
				2, [28.0*ratio-6, 12, -6],
				3, [22, 12, 28.0*ratio-6]
			))
		",
		_set_cam_rotation_r: "def(decimal ratio) -> commands
			lookat(level.camera, switch(_pos_index, 
				0, [22, 12, 22.0-28.0*ratio],
				1, [28.0*ratio-6, 12, 22],
				2, [-6, 12,  28.0*ratio-6],
				3, [22.0-28.0*ratio, 12, -6]
			), _v_target, _v_up)
		",
		
		_movement_graph: {default: null, type: "directed_graph|null"},
		
		game_server_address: { type: "string", default: "@eval TBS_SERVER_ADDRESS" },
		game_server_port: { type: "int", default: "@eval TBS_SERVER_PORT" },
	},
	
	is_strict: true,
	
	"on_key_press_1073741910": "set(level.camera.fov, clamp(level.camera.fov+0.5,15.0,90.0))",
	"on_key_press_1073741911": "set(level.camera.fov, clamp(level.camera.fov-0.5,15.0,90.0))",
	
	on_process: "[
	  tbs_process(_client),
	  map(['w','a','s','d','f','g','1','2','3','4','5','6','7','8',1073741911,1073741910,'q','e'], if(value in level.player.ctrl_keys, fire_event('key_press_' + value)))
	]",
	
	on_ctrl_left:  "[set(_pos_index, mod(_pos_index+1,4)), 
		[schedule(f,[_set_cam_rotation_l(f/25.0)]) | f<-range(26)]]
	",
	
	on_ctrl_right: "[set(_pos_index, mod(_pos_index-1,4)), 
		[schedule(f,[_set_cam_rotation_r(f/25.0)]) | f<-range(26)]]
	",
	
	on_create: "[
		// console_output_to_screen(false), 
		fire_event('window_resize', {width: level.camera_position[2], height: level.camera_position[3]}),
		
		if(grounds and grounds[_game.map_name], [
			set(level.isoworld, grounds[_game.map_name]), 
			fire_event('create_level_graph')
		]),
	
	] where grounds = get_document('data/battlegrounds.cfg')",
	
	on_create_level_graph: "[
		//if(mg, spawn('fighter',0,0,{rotate_y:45, tx:7.5, ty:1.5, tz:7.5, directed_move_graph: mg})),
		//if(mg, spawn('fighter',0,0,{rotate_y:45, tx:6.5, ty:1.5, tz:7.5, directed_move_graph: mg})),
		
		set(level.isoworld.objects, [{
			type: 'humanoid', 
			shader: 'lighted_color_shader',
			model: 'data/voxel_models/humanoid.cfg',
			scale: 0.2,
			translation: [1.5,3,1.5]
		}]),
		
		lookat(level.camera, position, target, _v_up),
		set(_v_position, position),
		set(_v_target, target),
		
		set(_movement_graph, mg),
	] where mg = level.isoworld.logical.create_directed_graph(), position = zip(level.isoworld.logical.size, [4,20,4], a*b), target = [level.isoworld.logical.size_x/2, -2, level.isoworld.logical.size_z/2]",
	
	on_window_resize: "[
		set(level.dimensions, [0, 0, arg.width, arg.height]),
	]",

	"on_mouse_move*": "debug(arg.world_point)",
	
	on_message_received: "[
		trigger_garbage_collection(),
		switch(message.type,
		    'game', [
				update_object(_game, gg),
			] where gg = class game<- message.state,
			debug('got message: ', message)
		),
	] where message = map<- arg.message, grounds = get_document('data/battlegrounds.cfg')",
}
